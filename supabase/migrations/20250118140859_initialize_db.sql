drop policy "Enable users to access their own data only" on "public"."userProfiles";

revoke delete on table "public"."userProfiles" from "anon";

revoke insert on table "public"."userProfiles" from "anon";

revoke references on table "public"."userProfiles" from "anon";

revoke select on table "public"."userProfiles" from "anon";

revoke trigger on table "public"."userProfiles" from "anon";

revoke truncate on table "public"."userProfiles" from "anon";

revoke update on table "public"."userProfiles" from "anon";

revoke delete on table "public"."userProfiles" from "authenticated";

revoke insert on table "public"."userProfiles" from "authenticated";

revoke references on table "public"."userProfiles" from "authenticated";

revoke select on table "public"."userProfiles" from "authenticated";

revoke trigger on table "public"."userProfiles" from "authenticated";

revoke truncate on table "public"."userProfiles" from "authenticated";

revoke update on table "public"."userProfiles" from "authenticated";

revoke delete on table "public"."userProfiles" from "service_role";

revoke insert on table "public"."userProfiles" from "service_role";

revoke references on table "public"."userProfiles" from "service_role";

revoke select on table "public"."userProfiles" from "service_role";

revoke trigger on table "public"."userProfiles" from "service_role";

revoke truncate on table "public"."userProfiles" from "service_role";

revoke update on table "public"."userProfiles" from "service_role";

alter table "public"."userProfiles" drop constraint "userProfilesUserIdKey";

alter table "public"."userProfiles" drop constraint "userProfilePkey";

drop index if exists "public"."userProfilesUserIdKey";

drop index if exists "public"."userProfilePkey";

drop table "public"."userProfiles";

create table "public"."passes" (
    "id" bigint generated by default as identity not null,
    "passTemplateId" uuid not null,
    "userId" uuid,
    "createdAt" timestamp with time zone not null default now(),
    "updatedAt" timestamp without time zone default (now() AT TIME ZONE 'utc'::text),
    "publishdAt" timestamp without time zone default now()
);


alter table "public"."passes" enable row level security;

create table "public"."users" (
    "id" uuid not null default gen_random_uuid(),
    "name" text,
    "iconBase64" text,
    "logoBase64" text,
    "createdAt" timestamp with time zone not null default now(),
    "updatedAt" timestamp without time zone default (now() AT TIME ZONE 'utc'::text)
);


alter table "public"."users" enable row level security;

CREATE UNIQUE INDEX passes_pkey ON public.passes USING btree (id);

CREATE UNIQUE INDEX "userProfilePkey" ON public.users USING btree (id);

alter table "public"."passes" add constraint "passes_pkey" PRIMARY KEY using index "passes_pkey";

alter table "public"."users" add constraint "userProfilePkey" PRIMARY KEY using index "userProfilePkey";

alter table "public"."passTemplates" add constraint "passTemplates_userId_fkey" FOREIGN KEY ("userId") REFERENCES users(id) not valid;

alter table "public"."passTemplates" validate constraint "passTemplates_userId_fkey";

alter table "public"."passes" add constraint "passes_passTemplateId_fkey" FOREIGN KEY ("passTemplateId") REFERENCES "passTemplates"(id) not valid;

alter table "public"."passes" validate constraint "passes_passTemplateId_fkey";

alter table "public"."passes" add constraint "passes_userId_fkey" FOREIGN KEY ("userId") REFERENCES users(id) not valid;

alter table "public"."passes" validate constraint "passes_userId_fkey";

grant delete on table "public"."passes" to "anon";

grant insert on table "public"."passes" to "anon";

grant references on table "public"."passes" to "anon";

grant select on table "public"."passes" to "anon";

grant trigger on table "public"."passes" to "anon";

grant truncate on table "public"."passes" to "anon";

grant update on table "public"."passes" to "anon";

grant delete on table "public"."passes" to "authenticated";

grant insert on table "public"."passes" to "authenticated";

grant references on table "public"."passes" to "authenticated";

grant select on table "public"."passes" to "authenticated";

grant trigger on table "public"."passes" to "authenticated";

grant truncate on table "public"."passes" to "authenticated";

grant update on table "public"."passes" to "authenticated";

grant delete on table "public"."passes" to "service_role";

grant insert on table "public"."passes" to "service_role";

grant references on table "public"."passes" to "service_role";

grant select on table "public"."passes" to "service_role";

grant trigger on table "public"."passes" to "service_role";

grant truncate on table "public"."passes" to "service_role";

grant update on table "public"."passes" to "service_role";

grant delete on table "public"."users" to "anon";

grant insert on table "public"."users" to "anon";

grant references on table "public"."users" to "anon";

grant select on table "public"."users" to "anon";

grant trigger on table "public"."users" to "anon";

grant truncate on table "public"."users" to "anon";

grant update on table "public"."users" to "anon";

grant delete on table "public"."users" to "authenticated";

grant insert on table "public"."users" to "authenticated";

grant references on table "public"."users" to "authenticated";

grant select on table "public"."users" to "authenticated";

grant trigger on table "public"."users" to "authenticated";

grant truncate on table "public"."users" to "authenticated";

grant update on table "public"."users" to "authenticated";

grant delete on table "public"."users" to "service_role";

grant insert on table "public"."users" to "service_role";

grant references on table "public"."users" to "service_role";

grant select on table "public"."users" to "service_role";

grant trigger on table "public"."users" to "service_role";

grant truncate on table "public"."users" to "service_role";

grant update on table "public"."users" to "service_role";

create policy "Enable users to access their own data only"
on "public"."users"
as permissive
for all
to public
using ((( SELECT auth.uid() AS uid) = id));




